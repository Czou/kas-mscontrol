   ------
   Kurento Android MSControl
   ------
   ------
   Date
   ------

Kurento Android MSControl

* Introduction

	Kurento Android MSControl is a sub-API of {{{../kc-mscontrol}Kurento Commons MSControl}}. It adds 
	specific features and components enabling Android applications to control 
	media.
	
	
* Simple and usable API

	Kurento Android MSControl implements class <<MediaSessionAndroid>> as the central element for
	creation of <<<Joinable>>> objects, that can be any of the following: 
	
		* <<NetworkConnection>>: Creates a bidirectional network delivery service with a remote
		peer. Instances are created by calling method <<<createNetworkConnection()>>> 
		
		* <<MediaComponentAndroid>>:  Provides a connection service to physical devices: 
		camera, screen, microphone, etc. Instances are created by calling method <<<createMediaComponent()>>>. 
		Physical device and media capabilities are set as parameter during instantiation  
	
	Kurento Android MSControl implements a parent factory <<MSControlFactory>>. 
	<<MediaSessionAndroid>> instances are created by calling <<<createMediaSession()>>> with a set of
	parameters that provide environment information and user preferences for media processing. 

[./images/kas-mscontrol.jpeg] kas-mscontrol API



* Parameters
	
	<<<Parameters>>> is a set of [key,value] pairs used to configure and parameterize object
	instantiation in Kurento MSControl. They not only provide a very simple configuration mechanism, but
	they also enable easy API extensions. Javadoc  provides a complete usage reference, 
	with clear indication of <<<Parameter>>> supported by each factory and valid ranges.
		
	<<<Parameters>>> instances are created with method <<<createParameters()>>> of factory
	 <<MSControlFactory>> and populated with method <<<put()>>>, as shown in the code below.

+---	
Parameters params = MSControlFactory.createParameters();
Parameter param = ...;
Object value = ...;
params.put(param, value);
+---

	There's also a special <<<Parameters>>> to indicate NO parameters:

+---
Parameters.NO_PARAMETER
+---


* MediaSessionAndroid
	
	A <<<MediaSessionAndroid>>> instance is created with method <<<createMediaSession()>>> 
	of <<<MSControlFactory>>>. This method requires a set of <<<Parameters>>> defined  in <<<MediaSessionAndroid>>> interface
	to provide media information and user preferences. Next table show supported parameters.
	
	
*--------*-----------*----*-------*--------------*--------------------------------------------------*
| <<Basic parameters>> | <<M/O>> | <<Type>> | <<Range>> | <<Default value>> | <<Description>> |
*--------*-----------*----*-------*---------------*-------------------------------------------------+
| NET_IF |  M | NetIF | [WIFI, MOBILE] | | Active network interface to be used. Can be WIFI or MOBILE. |
*--------*-----------*----*-------*---------------*-------------------------------------------------+
| LOCAL_ADDRESS | M | InetAddress | NA | |Local IP address of active interface. |
*--------*-----------*----*-------*---------------*-------------------------------------------------+
| MAX_BANDWIDTH | O | Integer | NET_IF.MOBILE:\ [150000,\ 384000]\ | NET_IF.MOBILE:\ 384000\ | MAX. bandwidth to be used in bps(bits per second). |
|				|	|		  | NET_IF.WIFI:\ [150000,\ 1500000]	| NET_IF.WIFI:\ 1500000  |    	|	
*--------*-----------*----*-------*---------------*-------------------------------------------------+
| STREAMS_MODES | O | Map\<MediaType,\ Mode\> | [SENDRECV, SENDONLY, RECVONLY] | SENDRECV | Connection mode for each media channel.|
*--------*-----------*----*-------*---------------*-------------------------------------------------+
| AUDIO_CODECS   | O | List\<AudioCodectype\> | [AMR, MP2] | [AMR, MP2] |Enabled audio codecs.  |
*--------*-----------*----*-------*---------------*-------------------------------------------------+
| VIDEO_CODECS   | O | List\<VideoCodectype\> | [H263, MPEG4]| [H263, MPEG4] |	Enabled video codecs. |
*--------*-----------*----*-------*---------------*-------------------------------------------------+
| <<Advanced parameters>> |
*--------*-----------*----*-------*---------------*-------------------------------------------------+
| FRAME_SIZE | O | Camera.Size | NA | 352x288 | Frame size in pixels (width x height).  |
*--------*-----------*----*-------*---------------*-------------------------------------------------+
| MAX_FRAME_RATE | O |Integer|  [1, MAX_INT] | 15 |MAX. frame rate to be used. |
*--------*-----------*----*-------*---------------*-------------------------------------------------+
| GOP_SIZE | O |Integer| [0, MAX_INT] | 6 | MAX. number of frames in a group of pictures, 0 for intra_only.  |
*--------*-----------*----*-------*---------------*-------------------------------------------------+
| FRAMES_QUEUE_SIZE | O | Integer | [2, MAX_INT] | 2 | MAX. number of frames will be buffered from the camera. |
|					|	|		  |				 |	 |The bigger buffer size the bigger latency.     |
*--------*-----------*----*-------*---------------*-------------------------------------------------+
(M: Mandatory; O: Optional)


	An example:

+---
Parameters params = MSControlFactory.createParameters();

params.put(MediaSessionAndroid.NET_IF, NetIF.MOBILE);

InetAddress localAddress =...;
params.put(MediaSessionAndroid.LOCAL_ADDRESS, localAddress);

int maxBW = 320000;
params.put(MediaSessionAndroid.MAX_BANDWIDTH, maxBW);

Map<MediaType, Mode> callDirection = new HashMap<MediaType, Mode>();
callDirection.put(MediaType.VIDEO, Mode.SENDRECV);
callDirection.put(MediaType.AUDIO, Mode.SENDRECV);
params.put(MediaSessionAndroid.STREAMS_MODES, callDirection);

ArrayList<AudioCodecType> audioCodecs = new ArrayList<AudioCodecType>();
audioCodecs.add(AudioCodecType.AMR);
audioCodecs.add(AudioCodecType.MP2);
params.put(MediaSessionAndroid.AUDIO_CODECS, audioCodecs);

ArrayList<VideoCodecType> videoCodecs = new ArrayList<VideoCodecType>();
videoCodecs.add(VideoCodecType.H263);
videoCodecs.add(VideoCodecType.MPEG4);
params.put(MediaSessionAndroid.VIDEO_CODECS, videoCodecs);

Camera.Size frameSize = ...;
params.put(MediaSessionAndroid.FRAME_SIZE, frameSize);

int maxFR = 12;
params.put(MediaSessionAndroid.MAX_FRAME_RATE, maxFR);

int gopSize = 8;
params.put(MediaSessionAndroid.GOP_SIZE, gopSize);

int maxQueueSize = 3;
params.put(MediaSessionAndroid.FRAMES_QUEUE_SIZE, maxQueueSize);


MediaSessionAndroid mediaSession = MSControlFactory.createMediaSession(params);
+---


* NetworkConnection

	A <<<NetworkConnection>>> represents the component directly connected to the network. It has
	two basic functions:
	
		* Transmit media received from its <<<joinees>>> through the net.
		
		* Relay media received from the net to all its <<<joinees>>>.

	The <<<NetworkConnection>>> implementation has two stream types: video and audio.
	A <<<NetworkConnection>>> and its stream types is determined by a pair of Session Descriptions
	obtained commonly after a negotiation performed by <<<SdpPortManager>>>: the <<<MediaServer>>> and the <<<UserAgent>>> SDP.

	Next code shows how to instantiate a <<<NetworkConnection>>>.
		
+---
NetworkConnection NC = mediaSession.createNetworkConnection();
+---

	To know more about <<<NetworkConnection>>> and <<<SdpPortManager>>> you can see {{{../kc-mscontrol}Kurento Commons MSControl}}
	and more specially  {{{http://www.jcp.org/en/jsr/detail?id=309}JSR309}} documentation.






* MediaComponentAndroid

	There are two main types of media component in terms of behavior:
		
		* A <<Player>> component  extracts media from its attached source and streams it out. If the
		component is joined to a <<<NetworkConnection>>>, the stream is sent out through the network.
	
		* A <<Recorder>> component retrieves the media stream from a <<<Joinable>>> object to
		which it is joined. In the simplest case this is a <<<NetworkConnection>>>, and the
		data comes from the network.
	
	The API provides four different media components that can be instantiated through the factory
	<<<MediaSessionAndroid>>>. Each component requires its particular configuration.
	
		* <<Audio Player Component:>> Extracts audio from the microphone and sends it to all its
		 <<<joinees>>>. Next code shows how to create this component.
		
+---
MediaComponentAndroid APC = mediaSession.createMediaComponent(MediaComponentAndroid.AUDIO_PLAYER, Parameters.NO_PARAMETER);
+---
		
		* <<Audio Recorder Component:>> Receive audio from one <<<joinee>>> and plays it on the speaker.
		In order to create a instance next code has to be executed.
		
+---	
Parameters params = MSControlFactory.createParameters();
params.put(MediaComponentAndroid.STREAM_TYPE, AudioManager.STREAM_MUSIC);
MediaComponentAndroid ARC = mediaSession.createMediaComponent(MediaComponentAndroid.AUDIO_RECORDER, params);
+---

		* <<Video Player Component:>> Extracts video from the camera and gives it to all its <<<joinees>>>.
		This componet is created with the next code.

+---
View view = ...;
int orientation = ...;
Parameters params = MSControlFactory.createParameters();
params.put(MediaComponentAndroid.PREVIEW_SURFACE, view);
params.put(MediaComponentAndroid.DISPLAY_ORIENTATION, orientation);
MediaComponentAndroid VPC = mediaSession.createMediaComponent( MediaComponentAndroid.VIDEO_PLAYER, params);
+---			
							
		
		* <<Video Recorder Component:>> Receives video from its <<<joinee>>> and plays it into a display.
		To create this component next code is executed:

+---
View view = ...;
int displayWidth = ...;
int displayHeight = ...;
Parameters params = MSControlFactory.createParameters();
params = MSControlFactory.createParameters();
params.put(MediaComponentAndroid.VIEW_SURFACE, view);
params.put(MediaComponentAndroid.DISPLAY_WIDTH, displayWidth);
params.put(MediaComponentAndroid.DISPLAY_HEIGHT, displayHeight);
MediaComponentAndroid VRC = mediaSession.createMediaComponent(MediaComponentAndroid.VIDEO_RECORDER, params);
+---




* Media composition
		
	The most common composite joins <<<MediaComponent>>> with <<<NetworkConnection>>>. Both
	are <<<Joinable>>> objects allowing dynamic compositions. It is possible to
	join and unjoin different types of <<<MediaComponent>>> with a <<<NetworkConnection>>>,
	even in started state. For example, we can unjoin a component
	that feed audio to <<<NetworkConnection>>> in order to simulate a mute.
	Notice each <<<MediaComponent>>> supports a single media type (AUDIO/VIDEO). Special
	care is required selecting appropriate media type and connection mode when joining
	to a <<<NetworkConnection>>> selecting the correct stream:
	
		* The Audio Player Component must be join join with <<<NetworkConnection>>> like:
		
+---
APC.join(SEND, NC.getJoinableStream(audio))
+---
		
		
		* The Audio Recorder Component must be join join with <<<NetworkConnection>>> like:
		
+---
ARC.join(RECV, NC.getJoinableStream(audio))
+---
		
		
		* The Video Player Component must be join join with <<<NetworkConnection>>> like:
		
+---
VPC.join(SEND, NC.getJoinableStream(video))
+---
		
		
		* The Video Recorder Component must be join join with <<<NetworkConnection>>> like:
		
+---
VRC.join(RECV, NC.getJoinableStream(video))
+---

		[]
	
[./images/media-composition.png] Media Composition
	
	

	
	
	